{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User1\\\\Documents\\\\Bootcamp\\\\Activities\\\\bootcamp_activities\\\\activities21.1\\\\03-Stu_AJAXBooks\\\\Unsolved\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User1\\\\Documents\\\\Bootcamp\\\\Activities\\\\bootcamp_activities\\\\activities21.1\\\\03-Stu_AJAXBooks\\\\Unsolved\\\\client\\\\src\\\\pages\\\\Books.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\"; // * Open up `client/src/pages/Books.js` and add code so that when the component mounts, it performs an AJAX request to retrieve all of the books in the database. Once the AJAX request is complete, it should set `books` equal to the array of books.\n// * If successful, a list of books should be rendered on the right side of the page.\n//   * We'll work on making the form functional in the next activity.\n// ## Hints\n// * Use the API helper module (`client/src/utils/API.js`) to perform an AJAX request which should return _all_ of the books in the database.\n// * The only file you will need to modify is `client/src/pages/Books.js`.\n// Read through Readme - Only need to update `Books.js` (/client/src/pages/Books.js)\n// Setup a useState for a formObject  [formObject, setFormObject] = useState({})\n// import API from \"../utils/API\"; And loadBooks will use the API.getBooks() function and “then” set the response to the books state setBooks(res.data)  \n// We will need a handleInputChange that takes the {name, value } = event.target; and setFormObject({ ...formObject, [name]: value })\n// We will need a handleFormSubmit that uses the API.saveBook function and THEN sends the formObject contents and resets the formObject properties to “”\n// (BONUS) We will need deleteBook function that takes the book._id and uses the  API.deleteBook function\n\nfunction Books() {\n  var _this = this;\n\n  // Initialize books as an empty array\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  useEffect(function () {\n    loadBooks();\n  }, []);\n\n  var _useState3 = useState({});\n\n  var _useState4 = _slicedToArray(_useState3, 2);\n\n  formObject = _useState4[0];\n  setFormObject = _useState4[1];\n\n  function loadBooks() {\n    // Add code here to get all books from the database and store them using setBooks\n    API.getBooks(books).then(function (res) {\n      console.log(res.data);\n      setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ;\n\n  var handleInputChange = function handleInputChange(event) {\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(name, value);\n  };\n\n  var handleFormSubmit = function handleFormSubmit(event) {\n    // When the form is submitted, prevent its default behavior, get recipes update the recipes state\n    event.preventDefault();\n    API.saveBook(formObject).then(function (res) {\n      console.log(res.data);\n      setFormObject(res.data);\n      setFormObject(\"\");\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"What Books Should I Read?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"author\",\n    placeholder: \"Author (required)\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: \"synopsis\",\n    placeholder: \"Synopsis (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Submit Book\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Books On My List\")), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, books.map(function (book) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/books/\" + book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/User1/Documents/Bootcamp/Activities/bootcamp_activities/activities21.1/03-Stu_AJAXBooks/Unsolved/client/src/pages/Books.js"],"names":["React","useState","useEffect","Jumbotron","DeleteBtn","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","API","Books","books","setBooks","loadBooks","formObject","setFormObject","getBooks","then","res","console","log","data","catch","err","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveBook","length","map","book","_id","title","author"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\";\n\n\n// * Open up `client/src/pages/Books.js` and add code so that when the component mounts, it performs an AJAX request to retrieve all of the books in the database. Once the AJAX request is complete, it should set `books` equal to the array of books.\n\n// * If successful, a list of books should be rendered on the right side of the page.\n\n//   * We'll work on making the form functional in the next activity.\n\n// ## Hints\n\n// * Use the API helper module (`client/src/utils/API.js`) to perform an AJAX request which should return _all_ of the books in the database.\n\n// * The only file you will need to modify is `client/src/pages/Books.js`.\n\n// Read through Readme - Only need to update `Books.js` (/client/src/pages/Books.js)\n// Setup a useState for a formObject  [formObject, setFormObject] = useState({})\n// import API from \"../utils/API\"; And loadBooks will use the API.getBooks() function and “then” set the response to the books state setBooks(res.data)  \n// We will need a handleInputChange that takes the {name, value } = event.target; and setFormObject({ ...formObject, [name]: value })\n// We will need a handleFormSubmit that uses the API.saveBook function and THEN sends the formObject contents and resets the formObject properties to “”\n// (BONUS) We will need deleteBook function that takes the book._id and uses the  API.deleteBook function\n\nfunction Books() {\n  // Initialize books as an empty array\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  [formObject, setFormObject] = useState({})\n\n  function loadBooks() {\n    // Add code here to get all books from the database and store them using setBooks\n    API.getBooks(books)\n      .then(res => {\n        console.log(res.data)\n        setBooks(res.data)\n      })\n      .catch(err => console.log(err));\n  };\n\n  const handleInputChange = event => {\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    const { name, value } = event.target;\n    setFormObject(name, value);\n  };\n\n  const handleFormSubmit = event => {\n    // When the form is submitted, prevent its default behavior, get recipes update the recipes state\n    event.preventDefault();\n    API.saveBook(formObject)\n      .then(res => {\n        console.log(res.data)\n        setFormObject(res.data)\n        setFormObject(\"\")\n      })\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-6\">\n          <Jumbotron>\n            <h1>What Books Should I Read?</h1>\n          </Jumbotron>\n          <form>\n            <Input name=\"title\" placeholder=\"Title (required)\" onChange={handleInputChange}/>\n            <Input name=\"author\" placeholder=\"Author (required)\" onChange={handleInputChange}/>\n            <TextArea name=\"synopsis\" placeholder=\"Synopsis (Optional)\" />\n            <FormBtn   onClick={handleFormSubmit}>Submit Book</FormBtn>\n          </form>\n        </Col>\n        <Col size=\"md-6 sm-12\">\n          <Jumbotron>\n            <h1>Books On My List</h1>\n          </Jumbotron>\n          {books.length ? (\n            <List>\n              {books.map(book => (\n                <ListItem key={book._id}>\n                  <a href={\"/books/\" + book._id}>\n                    <strong>\n                      {book.title} by {book.author}\n                    </strong>\n                  </a>\n                  <DeleteBtn />\n                </ListItem>\n              ))}\n            </List>\n          ) : (\n            <h3>No Results to Display</h3>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}